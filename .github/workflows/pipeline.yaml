# This is a basic workflow to help you get started with Actions
name: Pipeline
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths: 
    - Azure/**
    - .github/workflows/pipeline.yaml
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# Env to set reusable variables
env:
  AZURE_RG_NAME: Operator-QA-ResourceGroup
  AZURE_CONTAINER_REGISTRY: OperatorQAContainerRegistry
  AKSNAME: ${{ secrets.AKSNAME }}
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains 2  jobs called Build and Deploy
  Build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Git checkout
        uses: actions/checkout@v2

      - name: az CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: ACR login
        run: az acr login -n $ACRNAME
        
      
      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: ./Azure
          push: true
          tags: ${{ env.ACRNAME }}.azurecr.io/website/website:${{ github.run_number }}
          
  Deploy:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - name: Git checkout
        uses: actions/checkout@v2
      - name: az CLI login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.RGNAME }}
          cluster-name: ${{ env.AKSNAME }}

      - name: Helm upgrade
        run: |
          helm upgrade website Azure/website --install \
            --set image.repository=$ACRNAME.azurecr.io/website/website \
            --set image.tag=${{ github.run_number }}
      - name: Get service IP
        run: |
          PUBLICIP=""
          while [ -z $PUBLICIP ]; do
            echo "Waiting for public IP..."
            PUBLICIP=$(kubectl get service website -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            [ -z "$PUBLICIP" ] && sleep 10
          done
          echo $PUBLICIP
